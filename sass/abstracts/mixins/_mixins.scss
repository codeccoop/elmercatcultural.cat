// Center block
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Column width with margin
// @mixin column-width($numberColumns: 3) {
//   width: map-get($columns, $numberColumns) -
//     (($columns__gap * ($numberColumns - 1)) / $numberColumns);
// }

@mixin columns_width($i) {
  width: column_width() * $i + $gutter_width * ($i - 1);
}

@mixin m-media($args...) {
  $length: length($args);

  @each $arg in $args {
    $value: map-get($breakpoints, $arg);
    @if not(map-has-key($breakpoints, $arg) or $arg == portrait or $arg == landscape) {
      @warn "\n\nOne or more m-breakpoint() mixins failed to compile. You must enter 1  or 2 of these valid keys: \n'" + keys($breakpoints) + "'.\n\n'landscape' and 'portrait' are also valid keys if they are preceded by 1 or 2 of the previously mentioned keys.\n";
    }
  }

  @if $length == 1 {
    $arg: nth($args, 1);
    @if map-has-key($breakpoints, $arg) {
      @media screen and (min-width: map-get($breakpoints, $arg)) {
        @content;
      }
    } @else {
      @media screen and (orientation: $arg) {
        @content;
      }
    }
  }

  @if $length == 2 {
    $arg1: nth($args, 1);
    $arg2: nth($args, 2);
    @if map-has-key($breakpoints, $arg2) {
      @media screen and (min-width: map-get($breakpoints, $arg1)) and (max-width: map-get($breakpoints, $arg2)) {
        @content;
      }
    } @else {
      @media screen and (min-width: map-get($breakpoints, $arg1)) and (orientation: $arg2) {
        @content;
      }
    }
  }

  @if $length == 3 {
    $arg1: nth($args, 1);
    $arg2: nth($args, 2);
    $arg3: nth($args, 3);
    @media screen and (min-width: map-get($breakpoints, $arg1)) and (max-width: map-get($breakpoints, $arg2)) and (orientation: $arg3) {
      @content;
    }
  }

  @if $length > 3 {
    @warn "Too many arguments for m-breakpoint mixin. It expects a maximum amount of three arguments.";
  }
}

@function vh($value) {
  @return unquote("calc(var(--vh, 1vh) * #{$value})");
}

@function vw($value) {
  @return unquote("calc(var(--vw, 1vw) * #{$value})");
}
